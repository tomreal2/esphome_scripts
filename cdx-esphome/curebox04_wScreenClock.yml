esphome:
  name: mobile_04
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: "Fennario"
  password: "likeadove"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile 04 Fallback Hotspot"
    password: "uoya0sL7qBfA"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

#i2c:
#  - id: bus_a
#    sda: 1
#    scl: 2
#    scan: True
#  - id: bus_b
#    sda: 14 #pin 5 on left #outer wire
#    scl: 15 #pin 3 on right
#    scan: True

i2c:
  - id: bus_a
    sda: 16 #2 #pin5 on right #outer wire
    scl: 4 #15 #pin8 on right
    scan: True
  - id: bus_b
    sda: 19 #pin10 #7  9,10   
    scl: 18 #pin9 #8
    scan: True
  - id: bus_c
    sda: 21 #pin11 #7  9,10   
    scl: 3 #pin12 #8
    scan: True
     

    
font:
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font
    size: 20
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font2
    size: 15
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font3
    size: 12
    
globals:
  - id: "is_burping"
    type: bool
    restore_value: no
    initial_value: 'false'
   
switch:
  - platform: gpio
    name: "Power_04"
    id: "idpower_04"
    pin: 23
    restore_mode: ALWAYS_OFF
    
sensor:
  - platform: sht3xd
    i2c_id: bus_a
    temperature:
      id: "idtemperature04_1"
      name: "Temperature04_1"
    humidity:
      id: "idhumidity04_1"
      name: "Humidity04_1"
    address: 0x44
    update_interval: 30s
    
    
#time:
#  - platform: sntp
#    id: sntp_time
time:
  - platform: ds1307
    id: sntp_time
    i2c_id: bus_c
    on_time:
      # Every 1 minute
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: "return id(is_burping) == false;"
              then:
                - if:
                    condition:
                      switch.is_off: idpower_04
                    then:
                      - if:
                          condition:
                            lambda: 'return id(idhumidity04_1).state > 65.0;' #65
                          then:
                            - delay: 2 sec
                            - switch.turn_on: idpower_04
                            - delay: 20 sec
                            - switch.turn_off: idpower_04
                    else:
                      - if:
                          condition:
                            lambda: 'return id(idhumidity04_1).state <= 65.0;' #65
                          then:
                            - switch.turn_off: idpower_04
                          
      # Every 8 hours
      - seconds: 0
        minutes: 0
        hours: /8
        then:
          - if:
              condition:
                lambda: 'return id(idhumidity04_1).state > 62.0;'
              then:
                - lambda: "id(is_burping) = true;"
                - delay: 2 sec
                - switch.turn_on: idpower_04
                - delay: 15 sec
                - switch.turn_off: idpower_04
                - lambda: "id(is_burping) = false;"
              else:
                - if:
                    condition:
                      lambda: 'return id(idhumidity04_1).state > 58.0;'
                    then:
                      - lambda: "id(is_burping) = true;"
                      - delay: 1 sec
                      - switch.turn_on: idpower_04
                      - delay: 3 sec
                      - switch.turn_off: idpower_04
                      - lambda: "id(is_burping) = false;"
                

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    #reset_pin: D0
    i2c_id: bus_b
    address: 0x3C
    #it.print(0, 0, id(roboto_regular_font), "Hello World!");
    lambda: |-
      // top center.
      it.printf(64, 0, id(roboto_regular_font), TextAlign::TOP_CENTER, "Mobile 04");
      
      it.printf(0, 40, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Burp 3x Day");
      
      // Print time in HH:MM format
      //it.strftime(0, 60, id(roboto_regular_font), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
      it.strftime(0, 60, id(roboto_regular_font2), TextAlign::BASELINE_LEFT, "%I:%M %p", id(sntp_time).now());

      // Print humidity
      if (id(idhumidity04_1).has_state()) {
        it.printf(127, 23, id(roboto_regular_font), TextAlign::TOP_RIGHT , "%.1f%%", id(idhumidity04_1).state);
      }

      // Print temperature
      if (id(idtemperature04_1).has_state()) {
        it.printf(120, 60, id(roboto_regular_font), TextAlign::BASELINE_RIGHT , "%.1fÂ°", (id(idtemperature04_1).state * (9.0/5.0) + 32.0));
      }
      
