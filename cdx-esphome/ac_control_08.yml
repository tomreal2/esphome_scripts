esphome:
  name: mobile_08
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    - wait_until:
        api.connected:
    - script.execute: check_ac_08
    
wifi:
  ssid: "Fennario"
  password: "likeadove"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile 08 Fallback Hotspot"
    password: "uoya0sL7qBfA"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

globals:
  - id: "mobile_name_08"
    restore_value: no
    type: char[10]
    initial_value: "{'M','o','b','i','l','e',' ','0','8','\0'}"  #CHANGE THIS & REPLACE
  - id: "hour_on_08"
    initial_value: "10"  # 0-24
    type: int
    restore_value: no
  - id: "hour_off_08"
    initial_value: "22"   # 0-24
    type: int
    restore_value: no
  - id: "max_humidity_08"
    initial_value: "64.0"
    type: float
    restore_value: no
  - id: "max_temperature_08"
    initial_value: "74.0"
    type: float
    
switch:
  - platform: gpio
    name: "Power_08"
    id: "idpower_08"
    pin: 23 #pin15 - top right
    restore_mode: ALWAYS_OFF
    
i2c:
  - id: i2c_sensor
    sda: 16 #pin6 on right #outer wire
    scl: 4  #pin5 on right
    scan: True
  - id: i2c_display
    sda: 22 #pin14  -2nd from top on right
    scl: 1  #pin13  -3rd from top on right
    scan: True


sensor:
  - platform: sht3xd
    i2c_id: i2c_sensor
    temperature:
      id: "id_temperature_08"
      name: "Temperature_08"
    humidity:
      id: "id_humidity_08"
      name: "Humidity_08"
    #address: 0x44
    update_interval: 15s
  - platform: template
    name: "On Hour 08"
    id: "id_on_hour_08"
    lambda: "return id(hour_on_08);"
    update_interval: 5s
  - platform: template
    name: "Off Hour 08"
    id: "id_off_hour_08"
    lambda: "return id(hour_off_08);"
    update_interval: 5s
  - platform: template
    name: "Max Temp 08"
    id: "id_max_temp_08"
    lambda: "return id(max_temperature_08);"
    update_interval: 5s
  - platform: template
    name: "Max Hum 08"
    id: "id_max_hum_08"
    lambda: "return id(max_humidity_08);"
    update_interval: 5s
font:
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font
    size: 20
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font2
    size: 15
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font3
    size: 12

       
time:
  - platform: sntp
    id: sntp_time
    on_time: 
      - seconds: 0
        minutes: /1
        then: # Every 1 minute
          - script.execute: check_ac_08

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    i2c_id: i2c_display
    #address: 0x3C
    lambda: |-
      // top center.
      //it.printf(64, 0, id(roboto_regular_font), TextAlign::TOP_CENTER, "Mobile 08");
      it.printf(64, 0, id(roboto_regular_font), TextAlign::TOP_CENTER, id(mobile_name_08));
      
      it.printf(0, 40, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "AC Control");
      
      // Print time 
      it.strftime(0, 60, id(roboto_regular_font2), TextAlign::BASELINE_LEFT, "%I:%M %p", id(sntp_time).now());

      // Print humidity
      if (id(id_humidity_08).has_state()) {
        it.printf(127, 23, id(roboto_regular_font), TextAlign::TOP_RIGHT , "%.1f%%", id(id_humidity_08).state);
      }

      // Print temperature
      if (id(id_temperature_08).has_state()) {
        it.printf(120, 60, id(roboto_regular_font), TextAlign::BASELINE_RIGHT , "%.1fÂ°", (id(id_temperature_08).state * (9.0/5.0) + 32.0));
      }

    
script:
  - id: check_ac_08
    then:
      - if:
          condition:
            lambda: |-
                    auto time = id(sntp_time).now();
                    return ( (time.hour < id(hour_off_08) && time.hour >= id(hour_on_08))
                        || (time.hour >= id(hour_on_08) && id(hour_off_08) < id(hour_on_08))
                        || (time.hour < id(hour_off_08) && id(hour_off_08) < id(hour_on_08)) );
          then:
            - script.execute: start_ac_if_hot_08
          else:
            - script.execute: turn_off_power
  - id: start_ac_if_hot_08
    then:
      - if:
          condition:
            lambda: "return (id(id_humidity_08).state > id(max_humidity_08) || ((id(id_temperature_08).state * 1.8) + 32) > id(max_temperature_08));"
          then:
            - script.execute: turn_on_power
          else:
            - script.execute: turn_off_power
  - id: turn_on_power
    then:
      - if:
          condition:
            switch.is_off: idpower_08
          then:
            - switch.turn_on: idpower_08
  - id: turn_off_power
    then:
      - if:
          condition:
            switch.is_on: idpower_08
          then:
            - switch.turn_off: idpower_08