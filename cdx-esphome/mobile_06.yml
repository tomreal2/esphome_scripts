substitutions:
  room_type: "Clone" # Flower Dry Clone
  mobile_num: "06"
  max_hum: "70.0"
  max_vpd: "1.03"

esphome:
  name: mobile_${mobile_num}
  on_boot:
    - wait_until:
        api.connected:
    - script.execute: turn_off_humidifier

esp32:
  board: nodemcu-32s
  framework:
    type: arduino
    
wifi:
  ssid: "Fennario"
  password: "likeadove"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile ${mobile_num} Fallback Hotspot"
    password: "uoya0sL7qBfA"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  platform: esphome

switch:
  - platform: gpio
    name: "Humidifier_${mobile_num}"
    id: "idhumidifier_${mobile_num}"
    pin: 16
    restore_mode: ALWAYS_OFF
    
i2c:
  - id: i2c_sensor
    sda: 14 #pin 5 on left #outer wire
    scl: 15 #pin 3 on right
    scan: True
  - id: i2c_display
    sda: 1
    scl: 2
    scan: True


sensor:
  - platform: sht3xd
    i2c_id: i2c_sensor
    temperature:
      id: "idtemperature_${mobile_num}"
      name: "Temperature_${mobile_num}"
    humidity:
      id: "idhumidity_${mobile_num}"
      name: "Humidity_${mobile_num}"
    address: 0x44
    update_interval: 3s
  - platform: template
    name: "VPD ${mobile_num}"
    id: "idvpd_${mobile_num}"
    lambda: |-
      float temp = id(idtemperature_${mobile_num}).state;
      float hum  = id(idhumidity_${mobile_num}).state;
      return ((6.1078*exp(17.08085*temp/(234.175+temp)))-(6.1078*exp(17.08085*temp/(234.175+temp))*(hum/100)))/10;
    update_interval: 3s
    unit_of_measurement: "kPa"
    accuracy_decimals: 2
    
font:
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font
    size: 20
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font2
    size: 15
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font3
    size: 12

       
time:
  - platform: sntp
    id: sntp_time
    on_time: 
      - seconds: /3
        then: # Every 5 seconds
          - script.execute: sethumidifier_${mobile_num}
          
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    i2c_id: i2c_display
    address: 0x3C
    lambda: |-
      // top center.
      it.printf(64, 0, id(roboto_regular_font), TextAlign::TOP_CENTER, "Mobile ${mobile_num}");
      
      it.printf(0, 40, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Smarter Burp");
      
      // Print time 
      it.strftime(0, 60, id(roboto_regular_font2), TextAlign::BASELINE_LEFT, "%I:%M %p", id(sntp_time).now());

      // Print humidity
      if (id(idhumidity_${mobile_num}).has_state()) {
        it.printf(127, 23, id(roboto_regular_font), TextAlign::TOP_RIGHT , "%.1f%%", id(idhumidity_${mobile_num}).state);
      }

      // Print temperature
      if (id(idtemperature_${mobile_num}).has_state()) {
        it.printf(120, 60, id(roboto_regular_font), TextAlign::BASELINE_RIGHT , "%.1fÂ°", (id(idtemperature_${mobile_num}).state * (9.0/5.0) + 32.0));
      }

globals:
  - id: "max_humidity_${mobile_num}"
    initial_value: "64.0" #64.0 #"62.0" # "58.0"
    type: float
    restore_value: no
  - id: "min_humidity_${mobile_num}"
    initial_value: "61.0" #61.0 #"57.0" # "54.0"
    type: float
    restore_value: no
    
script:
  - id: turn_on_humidifier
    then:
      - if:
          condition:
            switch.is_off: idhumidifier_${mobile_num}
          then:
            - switch.turn_on: idhumidifier_${mobile_num}
  - id: turn_off_humidifier
    then:
      - if:
          condition:
            switch.is_on: idhumidifier_${mobile_num}
          then:
            - switch.turn_off: idhumidifier_${mobile_num}
  - id: sethumidifier_${mobile_num}
    then:    
      - if:
          condition:
            lambda: |-
              //ESP_LOGI("custom", "CHECKING VPD AND HUMIDIDTY");
              float vpd = id(idvpd_${mobile_num}).state;
              float hum = id(idhumidity_${mobile_num}).state;
              float max_vpd = ${max_vpd};
              float max_hum = ${max_hum};
              //String output = "vpd = "+ String(vpd, 2) + ", hum = "+ String(hum, 2) + ", max_vpd = "+ String(max_vpd, 2) + ", max_hum = "+ String(max_hum, 2);
              //ESP_LOGI("custom", output.c_str());
              // IF VPD IS TOO HIGH - AND - WE'RE NOT OVER THE MAX HUMIDIDY LIMIT
              //if ( vpd > max_vpd && hum < max_hum ) {
              //  ESP_LOGI("custom", "Turn on the humidifier");
              //} else {
              //  ESP_LOGI("custom", "Turn off the humidifier");
              //}
              return ( vpd > max_vpd && hum < max_hum );
          then:
            - script.execute: turn_on_humidifier
          else:
            - script.execute: turn_off_humidifier
            
