substitutions:
  sonoff_num: "07"
  hour_on: "6" # 9=xMasTree 10=flower 4=veg
  hour_off: "22" # 23=xMasTree 22=flowerANDveg
  
esphome:
  name: "power-sonoff-${sonoff_num}"
  #platform: ESP8266
  #board: esp01_1m

esp8266:
  board: esp01_1m
  
# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: "CTjWPAA9dSecdvuf3Em2kdxqxhU04hUCHOOGKtuBeJE="

ota:
  - platform: esphome
    password: "0342cddccc20d39dbe33cbf03035e35d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Power-Sonoff-${sonoff_num} Fallback Hotspot"
    password: "3uiru8asGGpA"

captive_portal:

uart:
  rx_pin: RX
  baud_rate: 4800
  
globals:
  - id: "hour_on_${sonoff_num}"
    initial_value: "${hour_on}"  # 0-24
    type: int
    restore_value: yes
  - id: "hour_off_${sonoff_num}"
    initial_value: "${hour_off}"   # 0-24
    type: int
    restore_value: yes

switch:
  - platform: gpio
    name: "Switch Sonoff ${sonoff_num}"
    pin: GPIO12
    id: sonoff_${sonoff_num}
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: template
    name: "Is Day Cycle"
    id: "isdaycycle"
    lambda: |-
      auto time = id(sntp_time).now();
      return ( (id(hour_off_${sonoff_num}) == id(hour_on_${sonoff_num}) && !(id(hour_off_${sonoff_num}) == 0 && id(hour_on_${sonoff_num}) == 0))
              || ( !(id(hour_off_${sonoff_num}) == 0 && id(hour_on_${sonoff_num}) == 0)
               && ( (time.hour < id(hour_off_${sonoff_num}) && time.hour >= id(hour_on_${sonoff_num}))
                || (time.hour >= id(hour_on_${sonoff_num}) && id(hour_off_${sonoff_num}) < id(hour_on_${sonoff_num}))
                || (time.hour < id(hour_off_${sonoff_num}) && id(hour_off_${sonoff_num}) < id(hour_on_${sonoff_num})) ) ) 
             );
            
time:
  - platform: sntp
    id: sntp_time
    timezone: "EST+5EDT,M3.2.0/2,M11.1.0/2"
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      # Every 1 minute check internal fan
      - seconds: 0
        minutes: /1
        then:
          - script.execute: setpower
          
status_led:
  pin: GPIO13
  
script:
  - id: setpower
    then:    
      - if:
          condition:
            lambda: "return id(isdaycycle).state;"
          then:
            - logger.log:
                level: DEBUG
                format: 'TURN ON - Cur hour: %i'
                args: ['id(sntp_time).now().hour']
            - if:
                condition:
                  - switch.is_off: sonoff_${sonoff_num}
                then:
                  - switch.turn_on: sonoff_${sonoff_num}
          else:
            - logger.log:
                level: DEBUG
                format: 'TURN OFF - Cur hour: %i'
                args: ['id(sntp_time).now().hour']
            - if:
                condition:
                  - switch.is_on: sonoff_${sonoff_num}
                then:
                  - switch.turn_off: sonoff_${sonoff_num}