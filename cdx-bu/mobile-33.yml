substitutions:
  mobile_num: "33"
  sensor_sda: "32"
  sensor_scl: "33"
  clock_sda: "21"
  clock_scl: "22"
  pump_1: "25"
  pump_2: "26"
  pump_3: "27"
  pump_4: "14"

esphome:
  name: mobile-${mobile_num}
  friendly_name: mobile-${mobile_num}

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:

api:
  encryption:
    key: "l8MAkUwtMhkWaGr2UoRNESvFVICk1Kxm0AqoVzR1RJA="

ota:
  - platform: esphome
    password: "251c8170a0a348f44c6f044cf8a7dbbb"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Mobile-${mobile_num} Fallback Hotspot"
    password: "fqC1nKEickNb"

captive_portal:

http_request:
  id: http_request_data
  useragent: esphome/device
  timeout: 10s
  verify_ssl: False

globals:
  - id: "fill_expiration_1"
    type: int
    restore_value: no
    initial_value: '0'
  - id: "fill_expiration_2"
    type: int
    restore_value: no
    initial_value: '0'
  - id: "fill_expiration_3"
    type: int
    restore_value: no
    initial_value: '0'
  - id: "fill_expiration_4"
    type: int
    restore_value: no
    initial_value: '0'
  - id: "weather_code"
    type: int
    restore_value: no
    initial_value: '0'
  - id: "run_time_1_clear_${mobile_num}"
    initial_value: "10"
    type: int
    restore_value: no
  - id: "run_time_2_clear_${mobile_num}"
    initial_value: "10"
    type: int
    restore_value: no
  - id: "run_time_3_clear_${mobile_num}"
    initial_value: "10"
    type: int
    restore_value: no
  - id: "run_time_1_cloudy_${mobile_num}"
    initial_value: "3"
    type: int
    restore_value: no
  - id: "run_time_2_cloudy_${mobile_num}"
    initial_value: "3"
    type: int
    restore_value: no
  - id: "run_time_3_cloudy_${mobile_num}"
    initial_value: "3"
    type: int
    restore_value: no
  - id: "run_time_4_${mobile_num}"
    initial_value: "180"
    type: int
    restore_value: no

switch:
  - platform: gpio
    name: "Pump1_${mobile_num}"
    id: idpump1_${mobile_num}
    pin: ${pump_1}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "Pump2_${mobile_num}"
    id: idpump2_${mobile_num}
    pin: ${pump_2}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "Pump3_${mobile_num}"
    id: idpump3_${mobile_num}
    pin: ${pump_3}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "Pump4_${mobile_num}"
    id: idpump4_${mobile_num}
    pin: ${pump_4}
    restore_mode: ALWAYS_OFF

  - platform: template
    name: "Start Fill 1"
    id: "startfill1"
    optimistic: true
    turn_on_action:
      - lambda: |-
          auto time = id(sntp_time).now();
          if (id(weather_code)==1) {
            if (id(run_time_1_clear_${mobile_num})==0) {
              id(fill_expiration_1) = 0;
            } else {
              id(fill_expiration_1) = time.timestamp + (60 * id(run_time_1_clear_${mobile_num}));
            }
          } else if (id(weather_code)==2) {
            if (id(run_time_1_cloudy_${mobile_num})==0) {
              id(fill_expiration_1) = 0;
            } else {
              id(fill_expiration_1) = time.timestamp + (60 * id(run_time_1_cloudy_${mobile_num}));
            }
          } else {
            id(fill_expiration_1) = 0;
          }
      - if:
          condition:
            and:
              - lambda: "return id(fill_expiration_1) != 0;"
              - switch.is_off: idpump1_${mobile_num}
          then:
            switch.turn_on: idpump1_${mobile_num}
          else:
            - delay: 1s
            - switch.turn_off: startfill1
    turn_off_action:
      - if:
          condition:
            switch.is_on: idpump1_${mobile_num}
          then:
            - switch.turn_off: idpump1_${mobile_num}
      - lambda: "id(fill_expiration_1) = 0;"

  - platform: template
    name: "Start Fill 2"
    id: "startfill2"
    optimistic: true
    turn_on_action:
      - lambda: |-
          auto time = id(sntp_time).now();
          if (id(weather_code)==1) {
            if (id(run_time_2_clear_${mobile_num})==0) {
              id(fill_expiration_2) = 0;
            } else {
              id(fill_expiration_2) = time.timestamp + (60 * id(run_time_2_clear_${mobile_num}));
            }
          } else if (id(weather_code)==2) {
            if (id(run_time_2_cloudy_${mobile_num})==0) {
              id(fill_expiration_2) = 0;
            } else {
              id(fill_expiration_2) = time.timestamp + (60 * id(run_time_2_cloudy_${mobile_num}));
            }
          } else {
            id(fill_expiration_2) = 0;
          }
      - if:
          condition:
            and:
              - lambda: "return id(fill_expiration_2) != 0;"
              - switch.is_off: idpump2_${mobile_num}
          then:
            - switch.turn_on: idpump2_${mobile_num}
          else:
            - delay: 1s
            - switch.turn_off: startfill2
    turn_off_action:
      - if:
          condition:
            switch.is_on: idpump2_${mobile_num}
          then:
            - switch.turn_off: idpump2_${mobile_num}
      - lambda: "id(fill_expiration_2) = 0;"
  - platform: template
    name: "Start Fill 3"
    id: "startfill3"
    optimistic: true
    turn_on_action:
      - lambda: |-
          auto time = id(sntp_time).now();
          if (id(weather_code)==1) {
            if (id(run_time_3_clear_${mobile_num})==0) {
              id(fill_expiration_3) = 0;
            } else {
              id(fill_expiration_3) = time.timestamp + (60 * id(run_time_3_clear_${mobile_num}));
            }
          } else if (id(weather_code)==2) {
            if (id(run_time_3_cloudy_${mobile_num})==0) {
              id(fill_expiration_3) = 0;
            } else {
              id(fill_expiration_3) = time.timestamp + (60 * id(run_time_3_cloudy_${mobile_num}));
            }
          } else {
            id(fill_expiration_3) = 0;
          }
      - if:
          condition:
            and:
              - lambda: "return id(fill_expiration_3) != 0;"
              - switch.is_off: idpump3_${mobile_num}
          then:
            - switch.turn_on: idpump3_${mobile_num}
          else:
            - delay: 1s
            - switch.turn_off: startfill3
    turn_off_action:
      - if:
          condition:
            switch.is_on: idpump3_${mobile_num}
          then:
            - switch.turn_off: idpump3_${mobile_num}
      - lambda: "id(fill_expiration_3) = 0;"
  - platform: template
    name: "Start Fill 4"
    id: "startfill4"
    optimistic: true
    turn_on_action:
      - if:
          condition:
            switch.is_off: idpump4_${mobile_num}
          then:
            - switch.turn_on: idpump4_${mobile_num}
      - lambda: |-
          auto time = id(sntp_time).now();
          id(fill_expiration_4) = time.timestamp + (60 * 180);
    turn_off_action:
      - if:
          condition:
            switch.is_on: idpump4_${mobile_num}
          then:
            - switch.turn_off: idpump4_${mobile_num}
      - lambda: "id(fill_expiration_4) = 0;"

sensor:
  - platform: template
    name: "Fill Minutes 1"
    id: idfillminutes1
    lambda: |-
      auto now = id(sntp_time).now().timestamp;
      return now >= id(fill_expiration_1)
        ? 0
        : (id(fill_expiration_1) - now) / 60.0;
    update_interval: 3s
    filters:
      - or:
        - throttle: 5min
        - delta: 0.1
  - platform: template
    name: "Fill Minutes 2"
    id: idfillminutes2
    lambda: |-
      auto now = id(sntp_time).now().timestamp;
      return now >= id(fill_expiration_2)
        ? 0
        : (id(fill_expiration_2) - now) / 60.0;
    update_interval: 3s
    filters:
      - or:
        - throttle: 5min
        - delta: 0.1
  - platform: template
    name: "Fill Minutes 3"
    id: idfillminutes3
    lambda: |-
      auto now = id(sntp_time).now().timestamp;
      return now >= id(fill_expiration_3)
        ? 0
        : (id(fill_expiration_3) - now) / 60.0;
    update_interval: 3s
    filters:
      - or:
        - throttle: 5min
        - delta: 0.1
  - platform: template
    name: "Fill Minutes 4"
    id: idfillminutes4
    lambda: |-
      auto now = id(sntp_time).now().timestamp;
      return now >= id(fill_expiration_4)
        ? 0
        : (id(fill_expiration_4) - now) / 60.0;
    update_interval: 3s
    filters:
      - or:
        - throttle: 5min
        - delta: 0.1
  # (repeat the above for Fill Minutes 2, 3, 4)

  - platform: template
    name: "Weather 1_Clear 2_Clouds 3_Rain"
    id: idweather
    accuracy_decimals: 0
    lambda: "return id(weather_code);"
    update_interval: 3s
    filters:
      - or:
        - throttle: 5min
        - delta: 1
  - platform: homeassistant
    id: run_time_1_clear_sensor_${mobile_num}
    entity_id: input_number.run_time_1_clear_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_1_clear_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_1_clear_${mobile_num}
                value: !lambda 'return int(x);'
  - platform: homeassistant
    id: run_time_2_clear_sensor_${mobile_num}
    entity_id: input_number.run_time_2_clear_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_2_clear_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_2_clear_${mobile_num}
                value: !lambda 'return int(x);'
  - platform: homeassistant
    id: run_time_3_clear_sensor_${mobile_num}
    entity_id: input_number.run_time_3_clear_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_3_clear_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_3_clear_${mobile_num}
                value: !lambda 'return int(x);'
  - platform: homeassistant
    id: run_time_1_cloudy_sensor_${mobile_num}
    entity_id: input_number.run_time_1_cloudy_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_1_cloudy_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_1_cloudy_${mobile_num}
                value: !lambda 'return int(x);'
  - platform: homeassistant
    id: run_time_2_cloudy_sensor_${mobile_num}
    entity_id: input_number.run_time_2_cloudy_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_2_cloudy_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_2_cloudy_${mobile_num}
                value: !lambda 'return int(x);'
  - platform: homeassistant
    id: run_time_3_cloudy_sensor_${mobile_num}
    entity_id: input_number.run_time_3_cloudy_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_3_cloudy_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_3_cloudy_${mobile_num}
                value: !lambda 'return int(x);'
  - platform: homeassistant
    id: run_time_4_sensor_${mobile_num}
    entity_id: input_number.run_time_4_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(run_time_4_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: run_time_4_${mobile_num}
                value: !lambda 'return int(x);'
                
time:
  - platform: sntp
    id: sntp_time
    on_time:
      # Every 2 minutes check weather
      - seconds: 0
        minutes: /2
        then:
          - script.execute: requestweather
      # Every 1 minute check pump_4
      - seconds: 0
        minutes: /1
        then:
          - delay: 1s
          - script.execute: setpump_1
          - script.execute: setpump_2
          - script.execute: setpump_3
          - script.execute: setpump_4

script:
  - id: requestweather
    then:
      - http_request.get:
          url: >-
            https://api.openweathermap.org/data/2.5/weather?lat=38.810810&lon=-77.155770&appid=799b46f3d009f302d76835c6469b2bdd
          request_headers:
            Content-Type: application/json
          capture_response: true      # <<— Add this
          on_response:
            then:
              - lambda: |-
                  // `body` is now a std::string containing the full JSON response
                  std::string target = body;

                  std::vector<std::string> rainy = {
                    "\"main\":\"Thunderstorm\"",
                    "\"main\":\"Drizzle\"",
                    "\"main\":\"Rain\"",
                    "\"main\":\"Snow\""
                  };
                  std::vector<std::string> clear = {
                    "\"main\":\"Clear\""
                  };

                  if (std::any_of(rainy.begin(), rainy.end(),
                                  [&target](const std::string &s){ return target.find(s) != std::string::npos; })) {
                    id(weather_code) = 3;
                  } else if (std::any_of(clear.begin(), clear.end(),
                                         [&target](const std::string &s){ return target.find(s) != std::string::npos; })) {
                    id(weather_code) = 1;
                  } else {
                    id(weather_code) = 2;
                  }
  - id: setpump_1
    then:
      - if:
          condition:
            lambda: |-
              auto time = id(sntp_time).now();
              return id(fill_expiration_1) <= time.timestamp;
          then:
            - if:
                condition:
                  switch.is_on: startfill1
                then:
                  - switch.turn_off: startfill1
            - if:
                condition:
                  switch.is_on: idpump1_${mobile_num}
                then:
                  - switch.turn_off: idpump1_${mobile_num}
  - id: setpump_2
    then:
      - if:
          condition: 
            lambda: |-
              auto time = id(sntp_time).now();
              return id(fill_expiration_2) <= time.timestamp;
          then:
            - if:
                condition:
                  switch.is_on: startfill2
                then:
                  - switch.turn_off: startfill2
            - if:
                condition:
                  switch.is_on: idpump2_${mobile_num}
                then:
                  - switch.turn_off: idpump2_${mobile_num}
  - id: setpump_3
    then:
      - if:
          condition: 
            lambda: |-
              auto time = id(sntp_time).now();
              return id(fill_expiration_3) <= time.timestamp;
          then:
            - if:
                condition:
                  switch.is_on: startfill3
                then:
                  - switch.turn_off: startfill3
            - if:
                condition:
                  switch.is_on: idpump3_${mobile_num}
                then:
                  - switch.turn_off: idpump3_${mobile_num}
  - id: setpump_4
    then:
      - if:
          condition: 
            lambda: |-
              auto time = id(sntp_time).now();
              return id(fill_expiration_4) <= time.timestamp;
              //return (id(fill_expiration_4) - time.timestamp) <= 0;
          then:
            - if:
                condition:
                  switch.is_on: startfill4
                then:
                  - switch.turn_off: startfill4
            - if:
                condition:
                  switch.is_on: idpump4_${mobile_num}
                then:
                  - switch.turn_off: idpump4_${mobile_num}
  - id: turn_off_all_power
    then:
      - if:
          condition:
            switch.is_on: idpump1_${mobile_num}
          then:
            - switch.turn_off: idpump1_${mobile_num}
      - if:
          condition:
            switch.is_on: idpump2_${mobile_num}
          then:
            - switch.turn_off: idpump2_${mobile_num}
      - if:
          condition:
            switch.is_on: idpump3_${mobile_num}
          then:
            - switch.turn_off: idpump3_${mobile_num}
      - if:
          condition:
            switch.is_on: idpump4_${mobile_num}
          then:
            - switch.turn_off: idpump4_${mobile_num}