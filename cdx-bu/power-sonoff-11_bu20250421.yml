substitutions:
  sonoff_num: "11"
  
esphome:
  name: "power-sonoff-${sonoff_num}"
  platform: ESP8266
  board: esp01_1m
  
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "bcFhoiXu7cv7/OfaYdvq4Vdq6iJi9xFQl7fIqfbypDM="

ota:
  password: "f375f93f90282b0025a7989e13a40326"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Power-Sonoff-11 Fallback Hotspot"
    password: "nesd0DDpAjzy"

captive_portal:

uart:
  rx_pin: RX
  baud_rate: 4800

#binary_sensor:
#  - platform: gpio
#    pin:
#      number: GPIO0
#      mode: INPUT_PULLUP
#      inverted: True
#    name: "Button Sonoff ${sonoff_num}"
#    on_press:
#      - switch.toggle: relay
#  - platform: status
#    name: "Status Sonoff ${sonoff_num}"

sensor:
#  - platform: wifi_signal
#    name: "Sonoff S31 WiFi Signal"
#    update_interval: 60s
  - platform: cse7766
    update_interval: 30s
    energy:
      name: "Energy Sonoff ${sonoff_num}"
      accuracy_decimals: 1
    current:
      name: "Current Sonoff ${sonoff_num}"
      accuracy_decimals: 1
    voltage:
      name: "Voltage Sonoff ${sonoff_num}"
      accuracy_decimals: 1
    power:
      name: "Power Sonoff ${sonoff_num}"
      accuracy_decimals: 1
      id: my_power
  - platform: total_daily_energy
    name: "Daily Energy Sonoff ${sonoff_num}"
    accuracy_decimals: 1
    power_id: my_power

switch:
  - platform: gpio
    name: "Switch Sonoff ${sonoff_num}"
    pin: GPIO12
    id: relay
    restore_mode: RESTORE_DEFAULT_ON

time:
  - platform: sntp
    id: my_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      # Every 1 minute check power
      - seconds: 0
        minutes: /1
        then:
          - script.execute: setpower
          
status_led:
  pin: GPIO13
  
script:
  - id: setpower
    then:    
      - if:
          condition:
            lambda: |-
              //1 minute on, 4 minutes off
              auto time = id(my_time).now();
              float min = time.minute;
              float den = 6.0;
              float calc1 = min/den;
              float calc2 = floor(min/den);
              return (calc1 == calc2);
          then:
            #- logger.log:
            #    level: DEBUG
            #    format: 'TURN ON - Cur Min: %i'
            #    args: ['id(my_time).now().minute']
            - if:
                condition:
                  - switch.is_off: relay
                then:
                  - switch.turn_on: relay
          else:
            #- logger.log:
            #    level: DEBUG
            #    format: 'TURN OFF - Cur Min: %i'
            #    args: ['id(my_time).now().minute']
            - if:
                condition:
                  - switch.is_on: relay
                then:
                  - switch.turn_off: relay