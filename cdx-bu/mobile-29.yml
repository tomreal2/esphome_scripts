substitutions:
  mobile_num: "29"
  sensor_sda: "32"
  sensor_scl: "33"
  clock_sda: "21"
  clock_scl: "22"
  light_pin: "27"
  fan_pin: "26"
  humidifier_pin: "25"
  sulphur_burner_pin: "14"
  max_temp: "78.0"
  #dehumidifier_pin: "14"

esphome:
  name: mobile-${mobile_num}

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "An1hE1RYETB8kbOR44qW7Wqk/ZjHsHyLGZ8Eq02bMIQ="

ota:
  platform: esphome
  password: "2a6c7477479f2bd8aba55350757b0de2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.33
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile-${mobile_num} Fallback Hotspot"
    password: "4TIT3FMJi1aS"

captive_portal:

i2c:
  - id: i2c_sensor
    scl: ${sensor_scl}
    sda: ${sensor_sda}
    scan: true
  - id: i2c_clock
    scl: ${clock_scl}
    sda: ${clock_sda}
    scan: true

time:
  - platform: sntp
    id: sntp_time
    servers:
      - 129.6.15.28   # time.nist.gov
      - 216.239.35.0  # Google
    on_time_sync:
      then:
        - logger.log:
            level: DEBUG
            format: 'on_time_sync event - sntp_time'
    on_time:
      # Every 5 s (was 1 min) check controls
      - seconds: /5
        then:
          if:
            condition:
              lambda: 'return id(is_initialized) > 3;'
            then:
              - script.execute: set_humidifier
              - script.execute: set_sulphurburncycle
              - delay: 1s
              - script.execute: setfan_${mobile_num}
              - script.execute: setlight_${mobile_num}
            else:
              - globals.set:
                  id: is_initialized
                  value: !lambda 'return id(is_initialized) + 1;'
              - logger.log:
                  level: DEBUG
                  format: 'increment is_initialized'

binary_sensor:
  - platform: template
    name: "Is Day Cycle"
    id: isdaycycle
    lambda: |-
      auto time = id(sntp_time).now();
      return (
        (id(hour_off_${mobile_num}) == id(hour_on_${mobile_num}) &&
         !(id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0)) ||
        (!(id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0) &&
         ((time.hour < id(hour_off_${mobile_num}) && time.hour >= id(hour_on_${mobile_num})) ||
          (time.hour >= id(hour_on_${mobile_num}) && id(hour_off_${mobile_num}) < id(hour_on_${mobile_num})) ||
          (time.hour < id(hour_off_${mobile_num}) && id(hour_off_${mobile_num}) < id(hour_on_${mobile_num}))))
      );

  - platform: template
    name: "Is Sulphur Burn Cycle"
    id: issulphurburncycle
    lambda: |-
      auto time = id(sntp_time).now();
      return ((time.hour == 22 || time.hour == 23) &&
              time.month == 5 && time.year == 2022 && time.day_of_month == 18);

sensor:
  - platform: sht3xd
    i2c_id: i2c_sensor
    temperature:
      id: idtemperature_${mobile_num}
      name: "Temperature_${mobile_num}"
    humidity:
      id: idhumidity_${mobile_num}
      name: "Humidity_${mobile_num}"
    address: 0x44
    update_interval: 5s

  - platform: template
    name: "VPD ${mobile_num}"
    id: vpd_${mobile_num}
    lambda: |-
      float t = id(idtemperature_${mobile_num}).state;
      float h = id(idhumidity_${mobile_num}).state;
      return ((6.1078 * exp(17.08085 * t / (234.175 + t)))
              - (6.1078 * exp(17.08085 * t / (234.175 + t)) * (h / 100.0))) / 10.0;
    update_interval: 5s
    unit_of_measurement: "kPa"
    accuracy_decimals: 2

  # Home-Assistant inputs
  - platform: homeassistant
    id: on_time_sensor_${mobile_num}
    entity_id: input_number.hour_lights_on_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_on_${mobile_num}) != int(x);'
          then:
            - logger.log:
                level: DEBUG
                format: 'Light ON time changed from %d to %d'
                args: ['id(hour_on_${mobile_num})', 'int(x)']
            - globals.set:
                id: hour_on_${mobile_num}
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_${mobile_num}

  - platform: homeassistant
    id: off_time_sensor_${mobile_num}
    entity_id: input_number.hour_lights_off_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_off_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: hour_off_${mobile_num}
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_${mobile_num}

  - platform: homeassistant
    id: max_vpd_sensor_${mobile_num}
    entity_id: input_number.max_vpd_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(max_vpd_${mobile_num}) != float(x);'
          then:
            - globals.set:
                id: max_vpd_${mobile_num}
                value: !lambda 'return float(x);'

  - platform: homeassistant
    id: min_vpd_sensor_${mobile_num}
    entity_id: input_number.min_vpd_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(min_vpd_${mobile_num}) != float(x);'
          then:
            - globals.set:
                id: min_vpd_${mobile_num}
                value: !lambda 'return float(x);'

switch:
  - platform: gpio
    name: "Suphur_Burner_${mobile_num}"
    id: idsuphurburner_${mobile_num}
    pin: ${sulphur_burner_pin}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "Light_${mobile_num}"
    id: idlight_${mobile_num}
    pin: ${light_pin}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "Fan_${mobile_num}"
    id: idfan_${mobile_num}
    pin: ${fan_pin}
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "Humidifier_${mobile_num}"
    id: idhumidifier_${mobile_num}
    pin: ${humidifier_pin}
    restore_mode: ALWAYS_OFF

globals:
  - id: hour_on_${mobile_num}
    initial_value: "11"        # 0-23
    type: int
    restore_value: yes

  - id: hour_off_${mobile_num}
    initial_value: "23"        # 0-23  <-- fixed (was "29")
    type: int
    restore_value: yes

  - id: max_temperature_${mobile_num}
    initial_value: "${max_temp}"
    type: float
    restore_value: no

  - id: min_temperature_${mobile_num}
    initial_value: "63.5"
    type: float
    restore_value: no

  - id: min_vpd_${mobile_num}
    initial_value: "1.0"
    type: float
    restore_value: no

  - id: max_vpd_${mobile_num}
    initial_value: "1.5"
    type: float
    restore_value: no

  - id: is_initialized
    initial_value: "0"
    type: int
    restore_value: no

# === SCRIPTS =================================================================

script:
  - id: turn_off_all_power
    then:
      - if:
          condition:
            switch.is_on: idlight_${mobile_num}
          then:
            - switch.turn_off: idlight_${mobile_num}
      - if:
          condition:
            switch.is_on: idfan_${mobile_num}
          then:
            - switch.turn_off: idfan_${mobile_num}
      - if:
          condition:
            switch.is_on: idhumidifier_${mobile_num}
          then:
            - switch.turn_off: idhumidifier_${mobile_num}
#      - if:
#          condition:
#            switch.is_on: iddehumidifier_${mobile_num}
#          then:
#            - switch.turn_off: iddehumidifier_${mobile_num}
  - id: setfan_${mobile_num}
    then:    
      - if:
          condition:
            lambda: "return !(id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0);"
          then:
            # fan
            - if:
                condition:
                  lambda: |-
                    //FAN
                    
                    //NO FAN DURING SULFUR BURN CYCLE
                    if (id(issulphurburncycle).state) {
                      return false;
                    }

                    float temp =    (id(idtemperature_${mobile_num}).state * 1.8) + 32;
                    float maxtemp = id(max_temperature_${mobile_num});
                    float mintemp = id(min_temperature_${mobile_num});
                    
                    //NIGHT TIME FAN RULES
                    if (!id(isdaycycle).state) {
                      float hum = id(idhumidity_${mobile_num}).state;
                      return ( (temp > maxtemp)
                          || (temp > mintemp && hum > 55.0) );
                    }
                    
                    //DAY TIME FAN RULES
                    float min_vpd = id(min_vpd_${mobile_num});
                    float vpd = id(vpd_${mobile_num}).state;
                    float targetVPD = min_vpd; // + 0.02;
                    return ( (temp > maxtemp)
                          || (temp > mintemp && vpd < targetVPD) );

                then:
                  - if:
                      condition:
                        switch.is_off: idfan_${mobile_num}
                      then:
                        - switch.turn_on: idfan_${mobile_num}
                else:
                  - if:
                      condition:
                        switch.is_on: idfan_${mobile_num}
                      then:
                        - switch.turn_off: idfan_${mobile_num}
  - id: setlight_${mobile_num}
    then:    
      - if:
          condition:
            lambda: "return id(isdaycycle).state;"
          then:
            - if:
                condition:
                  switch.is_off: idlight_${mobile_num}
                then:
                  - switch.turn_on: idlight_${mobile_num}
          else:
            - if:
                condition:
                  switch.is_on: idlight_${mobile_num}
                then:
                  - switch.turn_off: idlight_${mobile_num}    
  - id: onoffhourschange_${mobile_num}
    then:    
      - if:
          condition:
            lambda: "return (id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0);"
          then:
            - if:
                condition:
                  switch.is_on: idlight_${mobile_num}
                then:
                  - switch.turn_off: idlight_${mobile_num}
            - if:
                condition:
                  switch.is_on: idfan_${mobile_num}
                then:
                  - switch.turn_off: idfan_${mobile_num}
          else:
            - script.execute: setfan_${mobile_num}
            - script.execute: setlight_${mobile_num}
            - script.execute: turn_off_humidifier
  - id: set_sulphurburncycle
    then:
      - if:
          condition: 
            lambda: "return id(issulphurburncycle).state;"
          then:
            - if:
                condition:
                  switch.is_off: idsuphurburner_${mobile_num}
                then:
                  - switch.turn_on: idsuphurburner_${mobile_num}
          else:
            - if:
                condition:
                  switch.is_on: idsuphurburner_${mobile_num}
                then:
                  - switch.turn_off: idsuphurburner_${mobile_num}
  - id: set_humidifier
    then:
      - if:
          condition: # lights are scheduled to be on
            lambda: |-
              //TURN OFF IF LIGHTS ARE OFF
              if (!id(isdaycycle).state) return false;
              
              //TURN ON IF HOUR ON = HOUR OFF
              if (id(hour_on_${mobile_num}) == id(hour_off_${mobile_num})) return true;
            
              //GET CURRENT TIME
              auto time = id(sntp_time).now();
            
              //TURN ON IF LIGHTS WILL BE ON FOR MORE THAN AN HOUR
              if (id(hour_off_${mobile_num}) == 0 && time.hour < 23 && time.hour > 0) return true;
              if (time.hour < (id(hour_off_${mobile_num}) - 1)) return true;
            
              if (time.minute < 58) {
                return true; //TURN ON IF LIGHTS WILL BE ON FOR MORE THAN 2 MINUTES
              } else {
                return false; //TURN OFF IF LIGHTS ARE GOING OFF WITHIN 2 MINUTES
              }
            
          then:
            - if:
                condition:
                  lambda: |-
                    //HUMIDIFIER
                    float humidity = id(idhumidity_${mobile_num}).state;
                    if (humidity > 60.0) {
                      return false;
                    }
                    float vpd = id(vpd_${mobile_num}).state;
                    float temp =    (id(idtemperature_${mobile_num}).state * 1.8) + 32;
                    float maxtemp = id(max_temperature_${mobile_num});
                    float min_vpd = id(min_vpd_${mobile_num});
                    float max_vpd = id(max_vpd_${mobile_num});
                    
                    //VEG = 0.80 - 0.95
                    //float targetVPD = 0.94; 
                    //float targetVPDfanFight = 0.83;

                    //FL  = 1.00 - 1.20        // 0.96 - 1.15
                    //float targetVPD = (1.20 - 0.03); //1.14;
                    //float targetVPDfanFight =  (1.0 + 0.03); // 1.0;
                    
                    //MID FL  = 1.00 - 1.50        // 0.96 - 1.15
                    //float targetVPD = (1.50 - 0.03); //1.14;
                    //float targetVPDfanFight =  (1.0 + 0.03); // 1.0;     
                    
                    float targetVPD = max_vpd; //(max_vpd - 0.03);         
                    float targetVPDfanFight =  (max_vpd - 0.04);
                    
                    return ( (vpd > targetVPD)
                          || (vpd > targetVPDfanFight && temp > maxtemp) );
                then:
                  - script.execute: turn_on_humidifier
                else:
                  - script.execute: turn_off_humidifier
          else:
            - script.execute: turn_off_humidifier
  - id: turn_on_humidifier
    then:
      - if:
          condition:
            switch.is_off: idhumidifier_${mobile_num}
          then:
            - switch.turn_on: idhumidifier_${mobile_num}
  - id: turn_off_humidifier
    then:
      - if:
          condition:
            switch.is_on: idhumidifier_${mobile_num}
          then:
            - switch.turn_off: idhumidifier_${mobile_num}