substitutions:
  mobile_num: "25"
  sensor_sda: "32"
  sensor_scl: "33"
  light_pin: "25"
  fan_pin: "26"
  #humidifier_pin: "25"
  sulphur_burner_pin: "14"
  #dehumidifier_pin: "14"
  
esphome:
  name: mobile-${mobile_num}
  on_boot:
    then:
      #- ds1307.read_time:
      #    id: ds1307_time
          
      #- logger.log:
      #    level: DEBUG
      #    format: 'set current system time from the RTC hardware'
        #  set current system time from the RTC hardware
      - wait_until:
          api.connected:
      #- logger.log:
      #    level: DEBUG
      #    format: 'script.execute: turn_off_all_power'
      - script.execute: turn_off_all_power
    
esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "c4dd8e4d4c850b6c3bc939bab0352f89"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile-25 Fallback Hotspot"
    password: "SpMJG0c6t0H4"

captive_portal:

i2c:
  - id: i2c_sensor
    scl: ${sensor_scl} #33
    sda: ${sensor_sda} #32
    scan: True

    
time:
#  - platform: ds1307
#    id: ds1307_time
#    i2c_id: i2c_clock
#    address: 0x50 #0x68
#    on_time_sync:
#      then:
#        - logger.log:
#            level: DEBUG
#            format: 'on_time_sync event - ds1307'
  - platform: sntp
    id: sntp_time
    on_time_sync:
      then:
        - logger.log:
            level: DEBUG
            format: 'on_time_sync event - sntp_time'
    on_time:
      # Every 1 minute check fan, light, work light
      - seconds: /5 # 0
        #minutes: /1
        then:
          - script.execute: setfan_${mobile_num}
          - script.execute: setlight_${mobile_num}
          #- script.execute: set_dehumidifier
#  - platform: homeassistant
#    on_time_sync:
#      then:
#        - logger.log:
#            level: DEBUG
#            format: 'set RTC hardware time from the network'
        # set RTC hardware time from the network
 #       - ds1307.write_time:
 #           id: ds1307_time
   
binary_sensor:
  - platform: template
    name: "Is Day Cycle"
    id: "isdaycycle"
    lambda: |-
      auto time = id(sntp_time).now();
      return ( (id(hour_off_${mobile_num}) == id(hour_on_${mobile_num}) && !(id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0))
              || ( !(id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0)
               && ( (time.hour < id(hour_off_${mobile_num}) && time.hour >= id(hour_on_${mobile_num}))
                || (time.hour >= id(hour_on_${mobile_num}) && id(hour_off_${mobile_num}) < id(hour_on_${mobile_num}))
                || (time.hour < id(hour_off_${mobile_num}) && id(hour_off_${mobile_num}) < id(hour_on_${mobile_num})) ) ) 
             );
             
  - platform: template
    name: "Is Sulphur Burn Cycle"
    id: "issulphurburncycle"
    lambda: |-
      auto time = id(sntp_time).now();
      return ( (time.hour == 22 || time.hour==23) && time.month==5 && time.year==2022 && time.day_of_month == 18 
             );
                 
sensor:
  - platform: sht3xd
    i2c_id: i2c_sensor
    temperature:
      id: "idtemperature_${mobile_num}"
      name: "Temperature_${mobile_num}"
    humidity:
      id: "idhumidity_${mobile_num}"
      name: "Humidity_${mobile_num}"
    address: 0x44
    update_interval: 5s
  - platform: template
    name: "VPD ${mobile_num}"
    id: "vpd_${mobile_num}"
    lambda: |-
      float temp = id(idtemperature_${mobile_num}).state;
      float hum  = id(idhumidity_${mobile_num}).state;
      return ((6.1078*exp(17.08085*temp/(234.175+temp)))-(6.1078*exp(17.08085*temp/(234.175+temp))*(hum/100)))/10;
    update_interval: 5s
    unit_of_measurement: "kPa"
    accuracy_decimals: 2
  - platform: homeassistant
    id: on_time_sensor_${mobile_num}
    entity_id: input_number.hour_lights_on_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_on_${mobile_num}) != int(x);'
          then:
            - logger.log:
                level: DEBUG
                format: 'Light ON time changed from %d to %d'
                args: ['id(hour_on_${mobile_num})', 'int(x)']
            - globals.set:
                id: hour_on_${mobile_num}
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_${mobile_num}
  - platform: homeassistant
    id: off_time_sensor_${mobile_num}
    entity_id: input_number.hour_lights_off_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_off_${mobile_num}) != int(x);'
          then:
            - globals.set:
                id: hour_off_${mobile_num}
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_${mobile_num}
  - platform: homeassistant
    id: max_vpd_sensor_${mobile_num}
    entity_id: input_number.max_vpd_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(max_vpd_${mobile_num}) != float(x);'
          then:
            - globals.set:
                id: max_vpd_${mobile_num}
                value: !lambda 'return float(x);'
            #- logger.log:
            #    level: DEBUG
            #    format: 'New Max VPD: %.1f'
            #    args: ['id(max_vpd_${mobile_num})']
  - platform: homeassistant
    id: min_vpd_sensor_${mobile_num}
    entity_id: input_number.min_vpd_${mobile_num}
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(min_vpd_${mobile_num}) != float(x);'
          then:
            - globals.set:
                id: min_vpd_${mobile_num}
                value: !lambda 'return float(x);'
            #- logger.log:
            #    level: DEBUG
            #    format: 'New Min VPD: %.1f'
            #    args: ['id(min_vpd_${mobile_num})']
            
    
switch:
  - platform: gpio
    name: "Light_${mobile_num}" #"power02_${mobile_num}" 
    id: "idlight_${mobile_num}" #"idpower02_${mobile_num}" 
    pin: ${light_pin}
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: "Fan_${mobile_num}" #"power03_${mobile_num}" 
    id: "idfan_${mobile_num}" #"idpower03_${mobile_num}" 
    pin: ${fan_pin}
    restore_mode: ALWAYS_OFF

    
globals:
  - id: "hour_on_${mobile_num}"
    initial_value: "11"  # 0-24
    type: int
    restore_value: yes
  - id: "hour_off_${mobile_num}"
    initial_value: "${mobile_num}"   # 0-24
    type: int
    restore_value: yes
  - id: "max_temperature_${mobile_num}"
    initial_value: "79.0"
    type: float
    restore_value: no
  - id: "min_temperature_${mobile_num}"
    initial_value: "63.5"
    type: float
    restore_value: no    
  - id: "min_vpd_${mobile_num}"
    initial_value: "1.0"
    type: float
    restore_value: no
  - id: "max_vpd_${mobile_num}"
    initial_value: "1.5"
    type: float
    restore_value: no

script:
  - id: turn_off_all_power
    then:
      - if:
          condition:
            switch.is_on: idlight_${mobile_num}
          then:
            - switch.turn_off: idlight_${mobile_num}
      - if:
          condition:
            switch.is_on: idfan_${mobile_num}
          then:
            - switch.turn_off: idfan_${mobile_num}
  - id: setfan_${mobile_num}
    then:    
      - if:
          condition:
            lambda: "return !(id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0);"
          then:
            # fan
            - if:
                condition:
                  lambda: |-
                    //FAN
                    
                    //NO FAN DURING SULFUR BURN CYCLE
                    if (id(issulphurburncycle).state) {
                      return false;
                    }

                    float temp =    (id(idtemperature_${mobile_num}).state * 1.8) + 32;
                    float maxtemp = id(max_temperature_${mobile_num});
                    float mintemp = id(min_temperature_${mobile_num});
                    
                    //NIGHT TIME FAN RULES
                    if (!id(isdaycycle).state) {
                      float hum = id(idhumidity_${mobile_num}).state;
                      return ( (temp > maxtemp)
                          || (temp > mintemp && hum > 59.0) );
                    }
                    
                    //DAY TIME FAN RULES
                    float min_vpd = id(min_vpd_${mobile_num});
                    float vpd = id(vpd_${mobile_num}).state;
                    float targetVPD = min_vpd; // + 0.02;
                    return ( (temp > maxtemp)
                          || (temp > mintemp && vpd < targetVPD) );

                then:
                  - if:
                      condition:
                        switch.is_off: idfan_${mobile_num}
                      then:
                        - switch.turn_on: idfan_${mobile_num}
                else:
                  - if:
                      condition:
                        switch.is_on: idfan_${mobile_num}
                      then:
                        - switch.turn_off: idfan_${mobile_num}
  - id: setlight_${mobile_num}
    then:    
      - if:
          condition:
            lambda: "return id(isdaycycle).state;"
          then:
            - if:
                condition:
                  switch.is_off: idlight_${mobile_num}
                then:
                  - switch.turn_on: idlight_${mobile_num}
          else:
            - if:
                condition:
                  switch.is_on: idlight_${mobile_num}
                then:
                  - switch.turn_off: idlight_${mobile_num}    
  - id: onoffhourschange_${mobile_num}
    then:    
      - if:
          condition:
            lambda: "return (id(hour_off_${mobile_num}) == 0 && id(hour_on_${mobile_num}) == 0);"
          then:
            - if:
                condition:
                  switch.is_on: idlight_${mobile_num}
                then:
                  - switch.turn_off: idlight_${mobile_num}
            - if:
                condition:
                  switch.is_on: idfan_${mobile_num}
                then:
                  - switch.turn_off: idfan_${mobile_num}
          else:
            - script.execute: setfan_${mobile_num}
            - script.execute: setlight_${mobile_num}