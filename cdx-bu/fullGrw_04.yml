esphome:
  name: mobile_04
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    - wait_until:
        api.connected:
    - script.execute: setfan_04
    - script.execute: setlight_04
    - script.execute: turn_off_humidifier
    
wifi:
  ssid: "Fennario"
  password: "likeadove"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile 04 Fallback Hotspot"
    password: "UFbOsy9ExZYW"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


globals:
  - id: "mobile_name_04"
    restore_value: no
    type: char[10]
    initial_value: "{'M','o','b','i','l','e',' ','0','4','\0'}"  #CHANGE THIS & REPLACE _04
  - id: "hour_on_04"
    initial_value: "11"  # 0-24
    type: int
    restore_value: yes
  - id: "hour_off_04"
    initial_value: "22"   # 0-24
    type: int
    restore_value: yes
  - id: "max_temperature_04"
    initial_value: "79.0"
    type: float
    restore_value: no
  - id: "min_temperature_04"
    initial_value: "63.0"
    type: float
    restore_value: no    
  - id: "min_vpd_04"
    initial_value: "0.9"
    type: float
    restore_value: no
  - id: "max_vpd_04"
    initial_value: "1.1"
    type: float
    restore_value: no
  - id: "last_water01_04"
    type: int
    restore_value: yes
    initial_value: '0'
    
switch:
  - platform: gpio
    name: "Light_04"
    id: "idlight_04"
    pin: 
      number: 18
      inverted: true
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: "Humidifier_04"
    id: "idhumidifier_04"
    pin: 
      number: 19 #21 #19 #19 is labeled humidifier
      inverted: true
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: "Fan_04"
    id: "idfan_04"
    pin: 
      number: 21 #19 #21 #21 is labeled fan
      inverted: true
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: gpio
    name: "Water_Sensor01_04"
    id: "idwatersensor01_04"
    pin: 13
  - platform: template
    name: "Light Status 04"
    lambda: "return id(idlight_04).state;"
  - platform: template
    name: "Fan Status 04"
    lambda: "return id(idfan_04).state;"
  - platform: template
    name: "Is Day Cycle"
    id: "isdaycycle"
    lambda: |-
      auto time = id(sntp_time).now();
      return ( (id(hour_off_04) == id(hour_on_04) && !(id(hour_off_04) == 0 && id(hour_on_04) == 0))
              || ( !(id(hour_off_04) == 0 && id(hour_on_04) == 0)
               && ( (time.hour < id(hour_off_04) && time.hour >= id(hour_on_04))
                || (time.hour >= id(hour_on_04) && id(hour_off_04) < id(hour_on_04))
                || (time.hour < id(hour_off_04) && id(hour_off_04) < id(hour_on_04)) ) ) 
             );
 

i2c:
  - id: i2c_sensor
    sda: 16 #pin6 on right #outer wire
    scl: 4  #pin5 on right
    scan: True
  - id: i2c_display
    sda: 22 #pin14  -2nd from top on right
    scl: 1  #pin13  -3rd from top on right
    scan: True
       
sensor:
  - platform: hx711
    name: "Scale_04"
    dout_pin: 25 #27 #D0
    clk_pin: 26  #14 #D1
    gain: 128
    accuracy_decimals: 3
    update_interval: 5s
    filters:
      - calibrate_linear:
          - -18433.0 -> 0
          - 229375 -> 0.837
          - 311295 -> 1.245
          #- -43913 -> 0
          #- 712320 -> 1.316
    unit_of_measurement: kg
  - platform: template
    name: "Hours Since Water 01_04"
    id: "idhourslastwater01_04"
    lambda: |-
      auto time = id(sntp_time).now();
      if (id(last_water01_04) == 0 || id(last_water01_04) >= time.timestamp) {
        return 0;
      } else {
        float secssince = time.timestamp - (float)(id(last_water01_04));
        float minutessince = (secssince / 60.0);  //ceil
        float hourssince = (minutessince / 60.0);
        return hourssince;
      }
    update_interval: 60s
  - platform: sht3xd #sht3xd #hdc1080 #htu21d
    i2c_id: i2c_sensor
    temperature:
      id: "idtemperature_04"
      name: "Temperature04"
    humidity:
      id: "idhumidity_04"
      name: "Humidity04"
    #address: 0x44
    update_interval: 5s
  - platform: template
    name: "VPD 04"
    id: "vpd_04"
    lambda: |-
      float temp = id(idtemperature_04).state;
      float hum  = id(idhumidity_04).state;
      return ((6.1078*exp(17.08085*temp/(234.175+temp)))-(6.1078*exp(17.08085*temp/(234.175+temp))*(hum/100)))/10;
    update_interval: 3s
    unit_of_measurement: "kPa"
    accuracy_decimals: 2
  - platform: homeassistant
    id: on_time_sensor_04
    entity_id: input_number.hour_lights_on_04
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_on_04) != int(x);'
          then:
            - logger.log:
                level: DEBUG
                format: 'Light ON time changed from %d to %d'
                args: ['id(hour_on_04)', 'int(x)']
            - globals.set:
                id: hour_on_04
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_04
  - platform: homeassistant
    id: off_time_sensor_04
    entity_id: input_number.hour_lights_off_04
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_off_04) != int(x);'
          then:
            - globals.set:
                id: hour_off_04
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_04
  - platform: homeassistant
    id: max_vpd_sensor_04
    entity_id: input_number.max_vpd_04
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(max_vpd_04) != float(x);'
          then:
            - globals.set:
                id: max_vpd_04
                value: !lambda 'return float(x);'
            #- logger.log:
            #    level: DEBUG
            #    format: 'New Max VPD: %.1f'
            #    args: ['id(max_vpd_04)']
  - platform: homeassistant
    id: min_vpd_sensor_04
    entity_id: input_number.min_vpd_04
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(min_vpd_04) != float(x);'
          then:
            - globals.set:
                id: min_vpd_04
                value: !lambda 'return float(x);'
            #- logger.log:
            #    level: DEBUG
            #    format: 'New Min VPD: %.1f'
            #    args: ['id(min_vpd_04)']
            
time:
  - platform: sntp
    id: sntp_time
    on_time:
      - seconds: /5
        then:
          - script.execute: setfan_04
          - script.execute: setlight_04
          - script.execute: set_humidifier
      - seconds: 0
        minutes: /1 
        then:
          - script.execute: set_lastwater
                      
                
font:
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font
    size: 19
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font2
    size: 15
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font3
    size: 12
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font4
    size: 13
                  
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    #i2c_id: bus_display
    i2c_id: i2c_display
    #reset_pin: D0
    address: 0x3C
    lambda: |-
      // top center
      it.printf(64, 0, id(roboto_regular_font4), TextAlign::TOP_CENTER, id(mobile_name_04));
        
      int on_number = id(hour_on_04);;
      char onchar[(((sizeof on_number) * 8) + 2)/3 + 2];
      sprintf(onchar, "%d", on_number);
      
      int off_number = id(hour_off_04);;
      char offchar[(((sizeof off_number) * 8) + 2)/3 + 2];
      sprintf(offchar, "%d", off_number);

      char ontime [80];
      char *time_details = onchar; 
      struct tm tm;
      strptime(time_details, "%H", &tm);
      strptime("0", "%M", &tm);
      strptime("00", "%S", &tm);
      strftime(ontime, 80, "%I:%M %p", &tm);
      
      char offtime [80];
      char *time_details2 = offchar; 
      struct tm tm2;
      strptime(time_details2, "%H", &tm2);
      strptime("0", "%M", &tm2);
      strptime("00", "%S", &tm2);
      strftime(offtime, 80, "%I:%M %p", &tm2);
      
      it.printf(64, 13, id(roboto_regular_font3), TextAlign::TOP_CENTER, "%s - %s", ontime, offtime);
      
      // describe what this device is doing
      if (id(idlight_04).state) {
        it.printf(0, 37, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Light Is On");
      } else {
        it.printf(0, 37, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Light Is Off");
      }
      if (id(idfan_04).state) {
        it.printf(0, 49, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Fan Is On");
      } else {
        it.printf(0, 49, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Fan Is Off");
      }
      
      // Print time 
      it.strftime(0, 63, id(roboto_regular_font2), TextAlign::BASELINE_LEFT, "%I:%M %p", id(sntp_time).now());

      // Print humidity
      if (id(idhumidity_04).has_state()) {
        it.printf(127, 26, id(roboto_regular_font), TextAlign::TOP_RIGHT , "%.1f%%", id(idhumidity_04).state);
      }

      // Print temperature
      if (id(idtemperature_04).has_state()) {
        it.printf(120, 63, id(roboto_regular_font), TextAlign::BASELINE_RIGHT , "%.1fÂ°", (id(idtemperature_04).state * (9.0/5.0) + 32.0));
      }
      
script:
  - id: set_lastwater
    then:
      - if:
          condition:
            lambda: "return id(idwatersensor01_04).state;"
          then:
            - lambda: |-
                auto time = id(sntp_time).now();
                id(last_water01_04) = time.timestamp;
  - id: setfan_04
    then:    
      - if:
          condition:
            lambda: "return !(id(hour_off_04) == 0 && id(hour_on_04) == 0);"
          then:
            # fan
            - if:
                condition:
                  lambda: |-
                    //FAN
                    float temp =    (id(idtemperature_04).state * 1.8) + 32;
                    float maxtemp = id(max_temperature_04);
                    float mintemp = id(min_temperature_04);
                    float min_vpd = id(min_vpd_04);
                    float vpd = id(vpd_04).state;
                    
                    float targetVPD = min_vpd + 0.02;
                    
                    return ( (temp > maxtemp)
                          || (temp > mintemp && vpd < targetVPD) );

                then:
                  - if:
                      condition:
                        switch.is_off: idfan_04
                      then:
                        - switch.turn_on: idfan_04
                else:
                  - if:
                      condition:
                        switch.is_on: idfan_04
                      then:
                        - switch.turn_off: idfan_04
  - id: setlight_04
    then:    
      - if:
          condition:
            lambda: "return id(isdaycycle).state;"
          then:
            - if:
                condition:
                  switch.is_off: idlight_04
                then:
                  - switch.turn_on: idlight_04
          else:
            - if:
                condition:
                  switch.is_on: idlight_04
                then:
                  - switch.turn_off: idlight_04    
  - id: onoffhourschange_04
    then:    
      - if:
          condition:
            lambda: "return (id(hour_off_04) == 0 && id(hour_on_04) == 0);"
          then:
            - if:
                condition:
                  switch.is_on: idlight_04
                then:
                  - switch.turn_off: idlight_04
            - if:
                condition:
                  switch.is_on: idfan_04
                then:
                  - switch.turn_off: idfan_04
          else:
            - script.execute: setfan_04
            - script.execute: setlight_04
            - script.execute: turn_off_humidifier
  - id: set_humidifier
    then:
      - if:
          condition: # lights are scheduled to be on
            lambda: "return id(isdaycycle).state;"
          then:
            - if:
                condition:
                  lambda: |-
                    //HUMIDIFIER
                    float temp =    (id(idtemperature_04).state * 1.8) + 32;
                    float maxtemp = id(max_temperature_04);
                    float min_vpd = id(min_vpd_04);
                    float max_vpd = id(max_vpd_04);
                    float vpd = id(vpd_04).state;
                    
                    float vpd_range = (max_vpd - min_vpd);
                    float vpd_midpoint = min_vpd + (vpd_range * 0.75); //t has powerfer humidifier

                    float targetVPD = max_vpd - 0.03;
                    float targetVPDfanFight = vpd_midpoint; 
                    
                    return ( (vpd > targetVPD)
                          || (vpd > targetVPDfanFight && temp > maxtemp) );
                then:
                  - script.execute: turn_on_humidifier
                else:
                  - script.execute: turn_off_humidifier
          else:
            - script.execute: turn_off_humidifier
  - id: turn_on_humidifier
    then:
      - if:
          condition:
            switch.is_off: idhumidifier_04
          then:
            - switch.turn_on: idhumidifier_04
  - id: turn_off_humidifier
    then:
      - if:
          condition:
            switch.is_on: idhumidifier_04
          then:
            - switch.turn_off: idhumidifier_04