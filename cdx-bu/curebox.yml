esphome:
  name: mobile_06
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: "Fennario"
  password: "likeadove"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile 06 Fallback Hotspot"
    password: "uoya0sL7qBfA"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

i2c:
  sda: 1
  scl: 2

font:
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font
    size: 20
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font2
    size: 15
  - file: "Roboto-Regular.ttf"
    id: roboto_regular_font3
    size: 12
    
globals:
  - id: "is_burping"
    type: bool
    restore_value: no
    initial_value: 'false'
   
switch:
  - platform: gpio
    name: "Pump_6"
    id: "idpump_6"
    pin: 16
    restore_mode: RESTORE_DEFAULT_OFF
    
sensor:
  - platform: dht
    pin: 5
    temperature:
      id: "idtemperature6_1"
      name: "Temperature6_1"
      unit_of_measurement: "°C"
      #filters:
      #  - lambda: return x * (9.0/5.0) + 32.0;
    humidity:
      id: "idhumidity6_1"
      name: "Humidity6_1"
    update_interval: 8s
    model: DHT22 # AM2302 # DHT22
  - platform: dht
    pin: 18
    temperature:
      id: "idtemperature6_2"
      name: "Temperature6_2"
      unit_of_measurement: "°C"
      #filters:
      #  - lambda: return x * (9.0/5.0) + 32.0;
    humidity:
      id: "idhumidity6_2"
      name: "Humidity6_2"
    update_interval: 8s
    model: DHT22 # AM2302 # DHT22
    
time:
  - platform: sntp
    id: sntp_time
    on_time:
      # Every 1 minute
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: "return id(is_burping) == false;"
              then:
                - if:
                    condition:
                      switch.is_off: idpump_6
                    then:
                      - if:
                          condition:
                            lambda: 'return id(idhumidity6_1).state > 65.0;'
                          then:
                            - switch.turn_on: idpump_6
                    else:
                      - if:
                          condition:
                            lambda: 'return id(idhumidity6_1).state <= 65.0;'
                          then:
                            - switch.turn_off: idpump_6
                          
      # Every 8 hours
      - seconds: 0
        minutes: 0
        hours: /8
        then:
          - if:
              condition:
                lambda: 'return id(idhumidity6_1).state > 62.0;'
              then:
                - lambda: "id(is_burping) = true;"
                - switch.turn_on: idpump_6
                - delay: 3 min
                - switch.turn_off: idpump_6
                - lambda: "id(is_burping) = false;"
              else:
                - if:
                    condition:
                      lambda: 'return id(idhumidity6_1).state > 58.0;'
                    then:
                      - lambda: "id(is_burping) = true;"
                      - switch.turn_on: idpump_6
                      - delay: 1 min
                      - switch.turn_off: idpump_6
                      - lambda: "id(is_burping) = false;"
                

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    #reset_pin: D0
    address: 0x3C
    #it.print(0, 0, id(roboto_regular_font), "Hello World!");
    lambda: |-
      // top center.
      it.printf(64, 0, id(roboto_regular_font), TextAlign::TOP_CENTER, "Mobile 4");
      
      it.printf(0, 40, id(roboto_regular_font3), TextAlign::BASELINE_LEFT, "Burp 3x daily");
      
      // Print time in HH:MM format
      //it.strftime(0, 60, id(roboto_regular_font), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
      it.strftime(0, 60, id(roboto_regular_font2), TextAlign::BASELINE_LEFT, "%I:%M %p", id(sntp_time).now());

      // Print humidity
      if (id(idhumidity6_1).has_state()) {
        it.printf(127, 23, id(roboto_regular_font), TextAlign::TOP_RIGHT , "%.1f%%", id(idhumidity6_1).state);
      }

      // Print temperature
      if (id(idtemperature6_1).has_state()) {
        it.printf(120, 60, id(roboto_regular_font), TextAlign::BASELINE_RIGHT , "%.1f°", (id(idtemperature6_1).state * (9.0/5.0) + 32.0));
      }
      
#climate:
#  - platform: bang_bang
#    name: "Bang Bang Climate Controller"
#    sensor: idtemperature6_1
#    default_target_temperature_low: 70.0 °F
#    default_target_temperature_high: 70.1 °F
#    heat_action:
#      - switch.turn_on: idpump_6
#    cool_action:
#      - switch.turn_off: idpump_6
#    idle_action:
#      - switch.turn_off: idpump_6