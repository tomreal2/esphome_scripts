esphome:
  name: blue_cl
  platform: ESP32
  board: nodemcu-32s
  on_boot:
    - wait_until:
        api.connected:
    - script.execute: setfan_cl
    - script.execute: setlight_cl
    - script.execute: setDehumidifier_cl
wifi:
  ssid: "Fennario"
  password: "likeadove"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Mobile cl Fallback Hotspot"
    password: "UFbOsy9ExZYW"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


globals:
  - id: "mobile_name_cl"
    restore_value: no
    type: char[10]
    initial_value: "{'M','o','b','i','l','e',' ','c','l','\0'}"  #CHANGE THIS & REPLACE _cl
  - id: "hour_on_cl"
    initial_value: "10"  # 0-24
    type: int
    restore_value: yes
  - id: "hour_off_cl"
    initial_value: "22"   # 0-24
    type: int
    restore_value: yes
  - id: "max_temperature_cl"
    initial_value: "78.0"
    type: float
    restore_value: no
  - id: "min_temperature_cl"
    initial_value: "63.0"
    type: float
    restore_value: no
  - id: "max_humidity_cl"
    initial_value: "58.0"
    type: float
    restore_value: no
    
  
switch:
  - platform: gpio
    name: "Light_cl"
    id: "idlight_cl"
    pin: 2
    inverted: True
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: "Dehumidifier_cl"
    id: "iddehumidifier_cl"
    pin: 15
    inverted: True
    restore_mode: ALWAYS_OFF
  - platform: gpio
    name: "Fan_cl"
    id: "idfan_cl"
    pin: 4
    inverted: True
    restore_mode: ALWAYS_OFF

binary_sensor:
  - platform: template
    name: "Light Status cl"
    lambda: "return id(idlight_cl).state;"
  - platform: template
    name: "Dehumidifier Status cl"
    lambda: "return id(iddehumidifier_cl).state;"
  - platform: template
    name: "Fan Status cl"
    lambda: "return id(idfan_cl).state;"

i2c:
  - id: i2c_sensor
    scl: 22 
    sda: 21 
    scan: True
       
sensor:
  - platform: bme280 #sht3xd #hdc1080 #htu21d
    i2c_id: i2c_sensor
    temperature:
      id: "idtemperature_cl"
      name: "Temperature_cl"
    humidity:
      id: "idhumidity_cl"
      name: "Humidity_cl"
    pressure:
      name: "Pressure_cl"
    address: 0x76
    update_interval: 30s
  - platform: homeassistant
    id: on_time_sensor_cl
    entity_id: input_number.hour_lights_on_cl
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_on_cl) != int(x);'
          then:
            - globals.set:
                id: hour_on_cl
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_cl
  - platform: homeassistant
    id: off_time_sensor_cl
    entity_id: input_number.hour_lights_off_cl
    on_value:
      then:
        if:
          condition:
            lambda: 'return id(hour_off_cl) != int(x);'
          then:
            - globals.set:
                id: hour_off_cl
                value: !lambda 'return int(x);'
            - script.execute: onoffhourschange_cl
    
time:
  - platform: sntp
    id: sntp_time
    on_time:
      # Every 1 minute check fan, light, work light
      - seconds: 0
        minutes: /1
        then:
          - script.execute: setfan_cl
          - script.execute: setlight_cl
          - script.execute: setDehumidifier_cl
                      

script:
  - id: setfan_cl
    then:
      - if:
          condition:
            lambda: "return !(id(hour_off_cl) == 0 && id(hour_on_cl) == 0);"
          then:
            # fan
            - if:
                condition:
                  lambda: |-
                    float temp =    (id(idtemperature_cl).state * 1.8) + 32;
                    float hum =     id(idhumidity_cl).state;
                    float maxtemp = id(max_temperature_cl);
                    float mintemp = id(min_temperature_cl);
                    float maxhum =  id(max_humidity_cl);
                    return ( (temp > maxtemp)
                          || (temp > mintemp && hum > maxhum) );
                then:
                  - if:
                      condition:
                        - switch.is_off: idfan_cl
                      then:
                        - switch.turn_on: idfan_cl
                else:
                  - if:
                      condition:
                        - switch.is_on: idfan_cl
                      then:
                        - switch.turn_off: idfan_cl
  - id: setlight_cl
    then:    
      - if:
          condition:
            lambda: "return !(id(hour_off_cl) == 0 && id(hour_on_cl) == 0);"
          then:
            # light
            - if:
                condition:
                  lambda: |-
                    auto time = id(sntp_time).now();
                    return ( (id(hour_off_cl) == id(hour_on_cl))
                           || (time.hour < id(hour_off_cl) && time.hour >= id(hour_on_cl))
                           || (time.hour >= id(hour_on_cl) && id(hour_off_cl) < id(hour_on_cl))
                           || (time.hour < id(hour_off_cl) && id(hour_off_cl) < id(hour_on_cl)) );
                then:
                  - logger.log:
                      level: DEBUG
                      format: 'Light Turning ON - Hours: %d to %d'
                      args: ['id(hour_on_cl)', 'id(hour_off_cl)']
                  - if:
                      condition:
                        - switch.is_off: idlight_cl
                      then:
                        - switch.turn_on: idlight_cl
                else:
                  - if:
                      condition:
                        - switch.is_on: idlight_cl
                      then:
                        - switch.turn_off: idlight_cl    
  - id: setDehumidifier_cl
    then:    
      - if:
          condition: # humidifier - hourson/off are not same (shutdown)
            lambda: "return ( !(id(hour_off_cl) == 0 && id(hour_on_cl) == 0) );"
          then:
            - if:
                condition: # fan is off AND temp below 79 AND hum above 46 AND lights are scheduled to be off
                  lambda: |-
                    auto time = id(sntp_time).now();
                    float temp =    (id(idtemperature_cl).state * 1.8) + 32;
                    float hum =     id(idhumidity_cl).state;
                    return !(id(idfan_cl).state)
                        && temp < 79.0
                        && hum  > 46.0
                        && !( (time.hour < id(hour_off_cl) && time.hour >= id(hour_on_cl))
                            || (time.hour >= id(hour_on_cl) && id(hour_off_cl) < id(hour_on_cl))
                            || (time.hour < id(hour_off_cl) && id(hour_off_cl) < id(hour_on_cl)) );
                then:
                  - if:
                      condition:
                        - switch.is_off: iddehumidifier_cl
                      then:
                        - switch.turn_on: iddehumidifier_cl
                else:
                  - if:
                      condition:
                        - switch.is_on: iddehumidifier_cl
                      then:
                        - switch.turn_off: iddehumidifier_cl
  - id: onoffhourschange_cl
    then:    
      - if:
          condition:
            lambda: "return (id(hour_off_cl) == 0 && id(hour_on_cl) == 0);"
          then:
            - if:
                condition:
                  - switch.is_on: idlight_cl
                then:
                  - switch.turn_off: idlight_cl
            - if:
                condition:
                  - switch.is_on: iddehumidifier_cl
                then:
                  - switch.turn_off: iddehumidifier_cl
            - if:
                condition:
                  - switch.is_on: idfan_cl
                then:
                  - switch.turn_off: idfan_cl
          else:
            - script.execute: setfan_cl
            - script.execute: setlight_cl
            - script.execute: setDehumidifier_cl