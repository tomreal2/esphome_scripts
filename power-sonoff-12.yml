# run 1 minute of 5
substitutions:
  sonoff_num: "12"

  
esphome:
  name: power-sonoff-${sonoff_num}
  friendly_name: power-sonoff-${sonoff_num}

esp8266:
  board: esp01_1m
  
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "2I4zcE+OPONqwrIAoOVmhRDltbEytXTV7cB/dXKyFVM="

ota:
  - platform: esphome
    password: "2b14a86780896823b543149bbcd7de0e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Power-Sonoff-12 Fallback Hotspot"
    password: "LPKAu1xAuoVk"

captive_portal:

   
# uart:
#   rx_pin: RX
#   baud_rate: 4800

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Button Sonoff ${sonoff_num}"
    on_press:
      - switch.toggle: relay
  - platform: status
    name: "Status Sonoff ${sonoff_num}"


switch:
  - platform: gpio
    name: "Switch Sonoff ${sonoff_num}"
    pin: GPIO12
    id: relay
    restore_mode: ALWAYS_OFF

time:
  - platform: sntp
    id: my_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      # Every 1 minute check power
      - seconds: 0
        minutes: /1
        then:
          - script.execute: setpower

status_led:
  pin: GPIO13
  
script:
  - id: setpower
    then:    
      - if:
          condition:
            lambda: |-
              //1 minute on, 4 minutes off
              auto time = id(my_time).now();
              float min = time.minute;
              float den = 6.0;
              float calc1 = min/den;
              float calc2 = floor(min/den);
              return (calc1 == calc2);
          then:
            #- logger.log:
            #    level: DEBUG
            #    format: 'TURN ON - Cur Min: %i'
            #    args: ['id(my_time).now().minute']
            - if:
                condition:
                  - switch.is_off: relay
                then:
                  - switch.turn_on: relay
          else:
            #- logger.log:
            #    level: DEBUG
            #    format: 'TURN OFF - Cur Min: %i'
            #    args: ['id(my_time).now().minute']
            - if:
                condition:
                  - switch.is_on: relay
                then:
                  - switch.turn_off: relay